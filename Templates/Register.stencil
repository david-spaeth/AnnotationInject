// swiftlint: disable all
import Swinject
{% for module in argument.imports|split:"," %}
import {{module}}
{% endfor %}
{% filter removeNewlines %}

{% macro resolve_param param %}
  {% if param|annotated:"provided" %}{{param.name}}{% else %}resolver.registeredService(){% endif %}
{% endmacro %}

{% macro service_type name annotations %}{% filter removeNewlines %}
  {% for key,value in annotations.inject where key == "type" %}
      {{value}}
  {% empty%}
      {{name}}
  {% endfor %}
{% endfilter %}{% endmacro %}

{% macro init_service service init_method %}{% filter removeNewlines:"leading" %}
  {{service.name}}(
    {% for param in init_method.parameters %}
      {{param.argumentLabel}}: {% call resolve_param param %}
      {% ifnot forloop.last %}, {% endif %}
    {% endfor %}
  )
{% endfilter %}{% endmacro %}

{% macro inject_attributes service %}
  .initCompleted { resolver, service in
    {% for serviceAttribute in service.instanceVariables|annotated:"inject" %}
      {% if serviceAttribute.typeName.isOptional == 0 %}
        #error("'{{service.name}}.{{serviceAttribute.name}}' needs to be optional to be injected")
      {% elif serviceAttribute.isMutable == 0 %}
        #error("'{{service.name}}.{{serviceAttribute.name}}' needs to be mutable to be injected")
      {% else %}
        service.{{serviceAttribute.name}} = resolver.registeredService()
      {% endif %}
    {% endfor %}
  }
{% endmacro %}

{% macro add_register_options type %}
  {% for key,value in type.annotations.inject where key == "scope" %}
  .inObjectScope(.{{ value }})
  {% endfor %}
{% endmacro %}

{% macro register service method %}
  {% set serviceType %}{% call service_type service.name service.annotations %}{% endset %}
  container.register({{serviceType}}.self) { resolver{% for param in method.parameters|annotated:"provided" %}, {{param.name}}{% endfor %} in
    {% for service in method.parameters|!annotated:"provided" where service|!annotated:"provider" and service.type|!annotated:"inject" %}
      #error("Missing annotation `inject` on {{service.typeName}} or `provider` on '{{service.name}}' parameter")
    {% empty %}
      return {% call init_service service method %}
    {% endfor %}
  }
  {% call inject_attributes service %}
  {% call add_register_options service %}
{% endmacro %}

{% macro register_provider service typeName provider %}
  {% set actualTypeName %}{% call service_type typeName service.annotations %}{% endset %}
  container.register({{actualTypeName}}.self, factory: {{provider.definedInTypeName}}.{{provider.selectorName}})
  {% call add_register_options service %}
{% endmacro %}

{% endfilter %}

class AnnotationAssembly: Assembly {
  func assemble(container: Container) {
    {# find all injectable types #}
    {% for type in types.all|annotated:"inject" %}
      {# find the init method to register #}
      {% for init in type.initializers|annotated:"inject" %}
        {% call register type init %}
      {% empty %}
        {% call register type type.initializers.first %}
      {% endfor %}

    {% endfor %}

    {% for provider in types.all|annotated:"provider" %}
      {% for method in provider.methods|static where method.callName == "instantiate" %}
        {% call register_provider method.returnType method.returnTypeName method %}
      {% endfor %}
    {% endfor %}
  }
}